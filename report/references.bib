@article{wadler,
title = {Deforestation: transforming programs to eliminate trees},
journal = {Theoretical Computer Science},
volume = {73},
number = {2},
pages = {231-248},
year = {1990},
issn = {0304-3975},
doi = {https://doi.org/10.1016/0304-3975(90)90147-A},
url = {https://www.sciencedirect.com/science/article/pii/030439759090147A},
author = {Philip Wadler},
abstract = {An algorithm that transforms programs to eliminate intermediate trees is presented. The algorithm applies to any term containing only functions with definitions in a given syntactic form, and is suitable for incorporation in an optimizing compiler.}
}
@inproceedings{shortcut,
author = {Gill, Andrew and Launchbury, John and Peyton Jones, Simon L.},
title = {A Short Cut to Deforestation},
year = {1993},
isbn = {089791595X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/165180.165214},
doi = {10.1145/165180.165214},
booktitle = {Proceedings of the Conference on Functional Programming Languages and Computer Architecture},
pages = {223–232},
numpages = {10},
location = {Copenhagen, Denmark},
series = {FPCA '93}
}
@article{hodeforest,
author = {Hamilton, Geoff},
year = {1995},
month = {01},
pages = {},
title = {Higher Order Deforestation}
}
@inproceedings{other,
author = {Marlow, Simon and Wadler, Philip},
title = {Deforestation for Higher-Order Functions},
year = {1992},
isbn = {3540198202},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
booktitle = {Proceedings of the 1992 Glasgow Workshop on Functional Programming},
pages = {154–165},
numpages = {12}
}
@online{core,
  title = {Haskell core syn type},
  url = {https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/compiler/core-syn-type},
  urldate = {2023-06-19}}
@article{milner,
title = {A theory of type polymorphism in programming},
journal = {Journal of Computer and System Sciences},
volume = {17},
number = {3},
pages = {348-375},
year = {1978},
issn = {0022-0000},
doi = {https://doi.org/10.1016/0022-0000(78)90014-4},
url = {https://www.sciencedirect.com/science/article/pii/0022000078900144},
author = {Robin Milner},
abstract = {The aim of this work is largely a practical one. A widely employed style of programming, particularly in structure-processing languages which impose no discipline of types, entails defining procedures which work well on objects of a wide variety. We present a formal type discipline for such polymorphic procedures in the context of a simple programming language, and a compile time type-checking algorithm W which enforces the discipline. A Semantic Soundness Theorem (based on a formal semantics for the language) states that well-type programs cannot “go wrong” and a Syntactic Soundness Theorem states that if W accepts a program then it is well typed. We also discuss extending these results to richer languages; a type-checking algorithm based on W is in fact already implemented and working, for the metalanguage ML in the Edinburgh LCF system.}
}
@inproceedings{thih,
  title={Typing Haskell in Haskell},
  author={Mark P. Jones},
  year={1999}
}