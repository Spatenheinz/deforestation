:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest \rs -> decode (encode rs)
clear
clear
clear
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
:deforest fold (\x -> \y -> x + y) 0 (map square (until (\i -> i > n) (repeat (\z -> z + 1) 1)))
